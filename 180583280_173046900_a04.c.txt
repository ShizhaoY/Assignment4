/*
yuxx8328@mylaurier.ca 180583280
chun6900@mylaurier.ca 173046900
github:https://github.com/ShizhaoY/Assignment4
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_LINE_LEN 1000
#define MAX_RESOURCE_NUMBER 100
#define MAX_PROCESS_NUMBER 100

struct BankAlgorithmData{
    int available[MAX_RESOURCE_NUMBER];
    int maximum[MAX_PROCESS_NUMBER][MAX_RESOURCE_NUMBER];
    int allocated[MAX_PROCESS_NUMBER][MAX_RESOURCE_NUMBER];
    int need[MAX_PROCESS_NUMBER][MAX_RESOURCE_NUMBER];
};

struct BankAlgorithmData bankAlgorithmData;
int processRunSequence[MAX_PROCESS_NUMBER];
int processNumber = 0;
int resourceNumber = 0;

void synchronousNeed(){
    /*
    synchronous need data via maximum and allocated
    */
    for(int i = 0; i < processNumber; i++){
        for(int j = 0; j < resourceNumber; j++){
            bankAlgorithmData.need[i][j] = bankAlgorithmData.maximum[i][j] - bankAlgorithmData.allocated[i][j];
        }
    }
}

void readFileInitData(){
    /*
    Init bank algorithm data
    */
    FILE *file = fopen("./sample4_in.txt","r");
    while(!feof(file)){
        char oneLine[MAX_LINE_LEN];
        if(fgets(oneLine,MAX_LINE_LEN,file) != NULL){
            char *token = NULL;
            token = strtok(oneLine, ",");
            int i = 0;
            while (token != NULL) {
                bankAlgorithmData.maximum[processNumber][i] = atoi(token);
                token = strtok(NULL, ",");
                ++i;
            }
            processNumber++;
        }
    }
    synchronousNeed();
}

void printfBaseInformation(){
    printf("Number of Customer: %d \n",processNumber);
    printf("Currently Available resources:");
    for(int i = 0; i < resourceNumber; ++i){
        printf(" %d",bankAlgorithmData.available[i]);
        if(i == resourceNumber-1){
            printf("\n");
        }
    }
    printf("Maximum resources from file:\n");
    for(int i = 0; i < processNumber; ++i){
        for(int j = 0; j < resourceNumber; ++j){
            printf("%d ",bankAlgorithmData.maximum[i][j]);
            if(j == resourceNumber - 1){
                printf("\n");
            }
        }
    }
}

int safeAlgorithm(){
    int work[MAX_RESOURCE_NUMBER]={0};
    int finish[MAX_PROCESS_NUMBER]={0};
    for(int i = 0; i < MAX_RESOURCE_NUMBER; ++i){
        work[i] = bankAlgorithmData.available[i];
    }
    int finishNumber = 0;
    while(1){
        int flag = 0;
        for(int i = processNumber - 1; i >= 0; i--){
            for(int j = 0; j < resourceNumber; ++j){
                if(finish[i] == 1 || work[j] < bankAlgorithmData.need[i][j]){
                    break;
                }
                if(j == resourceNumber - 1){
                    for(int k = 0; k < resourceNumber; ++k){
                        work[k]+= bankAlgorithmData.allocated[i][k];
                    }
                    finish[i] = 1;
                    processRunSequence[finishNumber] = i;
                    finishNumber++;
                    flag = 1;                    
                }
            }
            if(flag){
                break;
            }
        }        
        if(flag == 0){
            return 0;
        }
        if(finishNumber == processNumber){
            return 1;
        }
    }
    return 0;
}
void bankAlgorithm(int processId,int requestResourceNumber[MAX_RESOURCE_NUMBER] ){
    for(int i = 0; i < resourceNumber; ++i){
        bankAlgorithmData.allocated[processId][i] += requestResourceNumber[i];
        bankAlgorithmData.available[i] -= requestResourceNumber[i];        
    }
    synchronousNeed();

    if(safeAlgorithm() == 1){
        printf("State is safe, and request is satisfied\n");
    }
    else{
        for(int i = 0; i < resourceNumber; ++i){
            bankAlgorithmData.available[i] += requestResourceNumber[i];
            bankAlgorithmData.allocated[processId][i] -= requestResourceNumber[i];
        }
        synchronousNeed();
    }
}
void runRQ(){
    int processId;
    int requestResourceNumber[resourceNumber];
    scanf("%d",&processId);
    for(int i = 0; i < resourceNumber; ++i){
        scanf("%d",&requestResourceNumber[i]);
    }
    bankAlgorithm(processId,requestResourceNumber);
}

void runRL(){
    int processId;
    scanf("%d",&processId);
    int releaseResourceNumber[resourceNumber];
    int inputValid = 1;
    for(int i = 0; i < resourceNumber; ++i){
        scanf("%d",&releaseResourceNumber[i]);
        if(releaseResourceNumber[i] > bankAlgorithmData.allocated[processId][i] ){
            inputValid = 0;
        }
    }           
    if(inputValid){
        for(int i = 0; i < resourceNumber; ++i){
            bankAlgorithmData.available[i] += releaseResourceNumber[i];
            bankAlgorithmData.allocated[processId][i] -= releaseResourceNumber[i];
        }
        synchronousNeed();
        printf("The resources have been released successfully\n") ;
    }
}

void runStatus(){
    printf("Available Resources:\n");
    for(int i = 0; i < resourceNumber; ++i){
        printf("%d ",bankAlgorithmData.available[i]);
        if(i == resourceNumber - 1){
            printf("\n");
        }
    }
    printf("Maximum Resources:\n");
    for(int i = 0; i < processNumber; ++i){
        for(int j = 0; j < resourceNumber; ++j){
            printf("%d ",bankAlgorithmData.maximum[i][j]);
            if(j == resourceNumber - 1)
                printf("\n");
        }
    }
    printf("Allocated Resources:\n");
    for(int i = 0; i < processNumber; ++i){
        for(int j = 0; j < resourceNumber; ++j){
            printf("%d ",bankAlgorithmData.allocated[i][j]);
            if(j == resourceNumber - 1)
                printf("\n");
        }
    }    
    printf("Need Resources:\n");
    for(int i = 0; i < processNumber; ++i){
        for(int j = 0; j < resourceNumber; ++j){
            printf("%d ",bankAlgorithmData.need[i][j]);
            if(j == resourceNumber - 1)
                printf("\n");
        }
    }    
}
void runRun(){
    if(safeAlgorithm() == 1){
        printf("Safe Sequence is:");
        for(int i = 0; i < processNumber; ++i){
            printf(" %d",processRunSequence[i]);
        }
        printf("\n");
        for(int i = 0; i < processNumber; ++i){
            int processId = processRunSequence[i];
            printf("--> Customer/Thread %d\n",processId);
            printf("Allocated resources:");
            for(int k = 0;k < resourceNumber; ++k){
                printf(" %d",bankAlgorithmData.allocated[processId][k]);
            }
            printf("\n");
            printf("Needed:");
            for(int j = 0; j < resourceNumber; ++j){
                printf(" %d",bankAlgorithmData.maximum[processId][j] - bankAlgorithmData.allocated[processId][j]);
            }
            printf("\n");
            printf("Available:");
            for(int j = 0; j < resourceNumber; ++j){
                printf(" %d",bankAlgorithmData.available[j]);
            }
            printf("\n");
            printf("Thread has started\n");
            printf("Thread has finished\n");
            printf("Thread is releasing resources\n");
            for(int j = 0; j < resourceNumber; ++j){
                bankAlgorithmData.available[j] += bankAlgorithmData.allocated[processId][j];
            }
            printf("New Available:");
            for(int j = 0; j < resourceNumber; ++j){
                printf(" %d",bankAlgorithmData.available[j]);
            }
            printf("\n");
        }
    }       
}
void loopCommand(){
    while(1){
        char command[100];
        printf("Enter Command:");
        scanf("%s",command);
        if(strcmp(command,"RQ") == 0){
            runRQ();
        }
        else if(strcmp(command,"RL") == 0){
            runRL();
        }
        else if(strcmp(command,"Status") == 0){
            runStatus();
        }
        else if(strcmp(command,"Run") == 0){
            runRun();
        }
        else if(strcmp(command,"Exit") == 0){
            break;
        }
    }
}

int main(int argc,char * argv[]) {
    for(int i = 1; i < argc; ++i){
        bankAlgorithmData.available[i-1] = atoi(argv[i]);
        resourceNumber++;
    }
    readFileInitData();
    printfBaseInformation();
    loopCommand();
	return 0;
}